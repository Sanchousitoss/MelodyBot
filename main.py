import os
import json
import logging
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from yt_dlp import YoutubeDL

def default_converter(o):
    if isinstance(o, date):
        return o.isoformat()
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
user_data = {}
unlimited_users = set()
TOKEN = "7708428765:AAF7NyREIWq-zhOVkc6aiaHx4jYqg8pKgxM"
DOWNLOAD_FOLDER = './downloads/'
ADMIN_USER_ID = 5857286638
CHANNEL_NICK = "@melodytrack_bot"
SUBSCRIPTION_PRICES = {
    'en': "15 UAH",
    'ru': "15 UAH",
    'uk': "15 UAH"
}
button_texts = {
    "uk": {
        "help": "–î–æ–ø–æ–º–æ–≥–∞ (FAQ) ‚ùì",
        "benefits": "–ü–µ—Ä–µ–≤–∞–≥–∏ üí°",
        "buy_subscription": "–ö—É–ø–∏—Ç–∏ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –¥–æ—Å—Ç—É–ø üí≥",
        "view_downloads": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç—Ä–µ–∫–∏ üé∂",
        "change_language": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É üåê",
        "back": "–ù–∞–∑–∞–¥ üîô"
    },
    "ru": {
        "help": "–ü–æ–º–æ—â—å (FAQ) ‚ùì",
        "benefits": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üí°",
        "buy_subscription": "–ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø üí≥",
        "view_downloads": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üé∂",
        "change_language": "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê",
        "back": "–ù–∞–∑–∞–¥ üîô"
    },
    "en": {
        "help": "Help (FAQ) ‚ùì",
        "benefits": "Benefits üí°",
        "buy_subscription": "Buy Unlimited Access üí≥",
        "view_downloads": "View Downloaded Tracks üé∂",
        "change_language": "Change Language üåê",
        "back": "Back üîô"
    }
}

greeting_messages = {
    "uk": "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ –∑ YouTube. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ, —ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –π–æ–≥–æ –≤ MP3 —Ñ–∞–π–ª. üéµ",
    "ru": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å YouTube. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ MP3 —Ñ–∞–π–ª. üéµ",
    "en": "Hello! üëã I'm a bot that will help you download audio from YouTube. Send me a link to a video, and I'll convert it to an MP3 file. üéµ"
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É JSON
def load_user_data(user_data_file=None):
    global user_data
    if os.path.exists('user_data.json'):
        try:
            with open('user_data.json', 'r') as f:
                user_data = json.load(f)
            logging.info("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ user_data.json")
        except json.JSONDecodeError as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON: {e}. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ.")
            logging.error("–í–º—ñ—Å—Ç —Ñ–∞–π–ª—É user_data.json:")
            with open('user_data.json', 'r') as f:
                logging.error(f.read())
            user_data = {}
            save_user_data()  # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –¥–∞–Ω–∏–º–∏
    else:
        logging.info("–§–∞–π–ª user_data.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ.")
        user_data = {}
        save_user_data()  # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –¥–∞–Ω–∏–º–∏

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª JSON
def save_user_data():
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f, indent=4, default=default_converter)
    logging.info("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ user_data.json")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
load_user_data()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –∑ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º
async def add_unlimited_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    if chat_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_unlimited_user <user_id>")
        return

    user_id = int(context.args[0])
    unlimited_users.add(user_id)
    save_user_data()
    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –∑ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, welcome_message: bool) -> None:
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
    if chat_id not in user_data:
        user_data[chat_id] = {'downloads_today': 0, 'last_download': datetime.today().date(), 'downloads': [], 'language': 'en'}
    language = user_data[chat_id]['language']

    keyboard = [
        [InlineKeyboardButton(button_texts[language]["help"], callback_data="help")],
        [InlineKeyboardButton(button_texts[language]["benefits"], callback_data="benefits")],
        [InlineKeyboardButton(button_texts[language]["buy_subscription"], callback_data="buy_subscription")],
        [InlineKeyboardButton(button_texts[language]["view_downloads"], callback_data="view_downloads")],
        [InlineKeyboardButton(button_texts[language]["change_language"], callback_data="change_language")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = greeting_messages[language] if welcome_message else button_texts[language]["change_language"]

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó YouTube –≤—ñ–¥–µ–æ –≤ MP3
async def download_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id

    if chat_id not in user_data:
        user_data[chat_id] = {'downloads_today': 0, 'last_download': datetime.today().date(), 'downloads': [], 'language': 'en'}

    language = user_data[chat_id]['language']

    messages = {
        "uk": {
            "downloading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞—î... ‚è≥",
            "limit_reached": "–í–∏ –¥–æ—Å—è–≥–ª–∏ —Å–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –≤ 5 –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –ø—Ä–∏–¥–±–∞–π—Ç–µ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –¥–æ—Å—Ç—É–ø. üéâ",
            "subscribe_prompt": f"–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_NICK}. ü§ù",
            "download_success": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ! –£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining_downloads} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. üéâ",
            "download_success_no_remaining": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ! –£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å –≤—Å—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. üéâ",
            "download_error": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî",
            "invalid_link": "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube. üìπ"
        },
        "ru": {
            "downloading": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... ‚è≥",
            "limit_reached": "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 5 –∑–∞–≥—Ä—É–∑–æ–∫. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø. üéâ",
            "subscribe_prompt": f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_NICK}. ü§ù",
            "download_success": "–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining_downloads} –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üéâ",
            "download_success_no_remaining": "–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞! –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üéâ",
            "download_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üòî",
            "invalid_link": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube. üìπ"
        },
        "en": {
            "downloading": "Downloading in progress... ‚è≥",
            "limit_reached": "You have reached your daily limit of 5 downloads. Come back tomorrow or purchase unlimited access. üéâ",
            "subscribe_prompt": f"To use the bot, please subscribe to our channel {CHANNEL_NICK}. ü§ù",
            "download_success": "Download successful! You have {remaining_downloads} downloads left for today. üéâ",
            "download_success_no_remaining": "Download successful! You have used up all your free downloads for today. üéâ",
            "download_error": "Error processing the link. Please try again. üòî",
            "invalid_link": "Please provide a valid link to YouTube. üìπ"
        }
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
    today = datetime.today().date()
    if user_data[chat_id]['last_download'] != today:
        user_data[chat_id]['downloads_today'] = 0
        user_data[chat_id]['last_download'] = today

    if chat_id not in unlimited_users:
        limit_reached = user_data[chat_id]['downloads_today'] >= 5
    else:
        limit_reached = False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube
    if update.message and any(domain in update.message.text for domain in ['youtube.com', 'youtu.be']):
        video_url = update.message.text

        if limit_reached:
            await update.message.reply_text(
                messages[language]["limit_reached"],
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(button_texts[language]["buy_subscription"], callback_data="buy_subscription")]
                ]))
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        user_status = await context.bot.get_chat_member(CHANNEL_NICK, chat_id)
        if user_status['status'] == 'left':
            await update.message.reply_text(
                messages[language]["subscribe_prompt"],
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=f"https://t.me/{CHANNEL_NICK[1:]}", callback_data="check_subscription")]
                ]))
            return

        await update.message.reply_text(messages[language]["downloading"])

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(DOWNLOAD_FOLDER, '%(title)s.%(ext)s'),
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '320',
                }],
            }

            with YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(video_url, download=True)
                # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                safe_title = "".join(char if char.isalnum() else "_" for char in info_dict['title'])
                mp3_file_path = os.path.join(DOWNLOAD_FOLDER, f"{safe_title}.mp3")

            track_name = info_dict['title']
            if track_name not in user_data[chat_id]['downloads']:
                user_data[chat_id]['downloads'].append(mp3_file_path)

            await context.bot.send_audio(chat_id=chat_id, audio=open(mp3_file_path, 'rb'))

            user_data[chat_id]['downloads_today'] += 1
            remaining_downloads = 5 - user_data[chat_id]['downloads_today']
            if remaining_downloads > 0:
                await update.message.reply_text(messages[language]["download_success"].format(remaining_downloads=remaining_downloads))
            else:
                await update.message.reply_text(messages[language]["download_success_no_remaining"])

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            save_user_data()

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            await update.message.reply_text(messages[language]["download_error"])
    else:
        await update.message.reply_text(messages[language]["invalid_link"])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
async def buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.callback_query.message.chat_id
    language = user_data[chat_id]['language']

    messages = {
        "uk": "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –¥–æ—Å—Ç—É–ø, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å {price} –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:\n\n"
              "Monobank: 5375411591445601\n\n"
              "–ü—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–∞–∑—É –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö –≤–∫–∞–∂—ñ—Ç—å: '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ MelodyBot' üé∂\n\n"
              "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂—É @sanajros –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. üí≥",
        "ru": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {price} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç:\n\n"
              "Monobank: 5375411591445601\n\n"
              "–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MelodyBot' üé∂\n\n"
              "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ @sanajros –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. üí≥",
        "en": "To get unlimited access, please send {price} to the following account:\n\n"
              "Monobank: 5375411591445601\n\n"
              "When transferring, indicate in the comments: 'Subscription to MelodyBot' üé∂\n\n"
              "After payment, send a screenshot of the payment to @sanajros for verification. üí≥"
    }

    price = SUBSCRIPTION_PRICES[language]
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        messages[language].format(price=price),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(button_texts[language]["back"], callback_data="go_back")]
        ]))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤
async def view_downloads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
    if chat_id not in user_data:
        user_data[chat_id] = {'downloads_today': 0, 'last_download': datetime.today().date(), 'downloads': [], 'language': 'en'}
    language = user_data[chat_id]['language']

    messages = {
        "uk": "–í–∏ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞. üéµ",
        "ru": "–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞. üéµ",
        "en": "You haven't downloaded any tracks yet. üéµ",
        "downloaded_tracks": {
            "uk": "–í–∞—à—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç—Ä–µ–∫–∏:",
            "ru": "–í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:",
            "en": "Your downloaded tracks:",
            "completed": {
                "uk": "–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                "ru": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                "en": "Viewing of downloaded tracks is completed."
            }
        }
    }

    async def send_message(text, reply_markup=None):
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

    if chat_id not in user_data or not user_data[chat_id]['downloads']:
        await send_message(messages[language])
    else:
        await send_message(messages['downloaded_tracks'][language])

        for file_path in user_data[chat_id]['downloads']:
            with open(file_path, 'rb') as audio_file:
                await context.bot.send_audio(chat_id=chat_id, audio=audio_file)

        await send_message(messages['downloaded_tracks']['completed'][language],
                           reply_markup=InlineKeyboardMarkup([
                               [InlineKeyboardButton(button_texts[language]["back"], callback_data="go_back")]
                           ]))

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id

    if chat_id not in user_data:
        user_data[chat_id] = {'downloads_today': 0, 'last_download': datetime.today().date(), 'downloads': [], 'language': None}

    if user_data[chat_id]['language'] is None:
        keyboard = [
            [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="set_language_uk")],
            [InlineKeyboardButton("English üá¨üáß", callback_data="set_language_en")],
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="set_language_ru")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: üåç",
            reply_markup=reply_markup
        )
    else:
        await show_menu(update, context, welcome_message=False)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    if chat_id not in user_data:
        user_data[chat_id] = {'downloads_today': 0, 'last_download': datetime.today().date(), 'downloads': [], 'language': 'en'}

    await query.answer()

    language = user_data[chat_id]['language']

    if query.data == "help":
        messages = {
            "uk": "FAQ:\n\n1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è MP3. üé•\n2. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ 5 —Ç—Ä–µ–∫—ñ–≤ –Ω–∞ –¥–µ–Ω—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ. üÜì\n3. –©–æ–± –∑–Ω—è—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è, –ø—Ä–∏–¥–±–∞–π—Ç–µ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –¥–æ—Å—Ç—É–ø. üîì\n4. –ó–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é: @sanajros üìû",
            "ru": "FAQ:\n\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MP3. üé•\n2. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 5 —Ç—Ä–µ–∫–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ. üÜì\n3. –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫—É–ø–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø. üîì\n4. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @sanajros üìû",
            "en": "FAQ:\n\n1. Send a link to YouTube to download MP3. üé•\n2. You can download up to 5 tracks per day for free. üÜì\n3. To remove limits, purchase unlimited access. üîì\n4. Contact support: @sanajros üìû"
        }
        await query.message.edit_text(messages[language], reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(button_texts[language]["back"], callback_data="go_back")]
        ]))

    elif query.data == "benefits":
        messages = {
            "uk": "–ü–µ—Ä–µ–≤–∞–≥–∏:\n\n–ë–µ–∑ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó:\n- –î–æ 5 –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –Ω–∞ –¥–µ–Ω—å\n- –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å MP3 —Ñ–∞–π–ª—ñ–≤\n\n–ó –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–æ—é –≤–µ—Ä—Å—ñ—î—é:\n- –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å MP3 —Ñ–∞–π–ª—ñ–≤",
            "ru": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n\n–ë–µ–∑ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n- –î–æ 5 –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –¥–µ–Ω—å\n- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3 —Ñ–∞–π–ª–æ–≤\n\n–° –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π:\n- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3 —Ñ–∞–π–ª–æ–≤",
            "en": "Benefits:\n\nWithout Unlimited Version:\n- Up to 5 downloads per day\n- High quality MP3 files\n\nWith Unlimited Version:\n- Unlimited downloads\n- Priority support\n- High quality MP3 files"
        }
        await query.message.edit_text(messages[language], reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(button_texts[language]["back"], callback_data="go_back")]
        ]))

    elif query.data == "check_subscription":
        user_status = await context.bot.get_chat_member(CHANNEL_NICK, chat_id)
        if user_status['status'] == 'left':
            messages = {
                "uk": f"–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_NICK}. ü§ù",
                "ru": f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_NICK}. ü§ù",
                "en": f"To use the bot, please subscribe to our channel {CHANNEL_NICK}. ü§ù"
            }
            await query.message.edit_text(messages[language],
                                          reply_markup=InlineKeyboardMarkup([
                                              [InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
                                                                    url=f"https://t.me/{CHANNEL_NICK[1:]}",
                                                                    callback_data="check_subscription")]
                                          ]))
        else:
            messages = {
                "uk": "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º. üéâ",
                "ru": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. üéâ",
                "en": "Thank you for subscribing! You can now use the bot. üéâ"
            }
            await query.message.edit_text(messages[language], reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(button_texts[language]["back"], callback_data="go_back")]
            ]))

    elif query.data == "change_language":
        keyboard = [
            [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="set_language_uk")],
            [InlineKeyboardButton("English üá¨üáß", callback_data="set_language_en")],
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="set_language_ru")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: üåç",
            reply_markup=reply_markup
        )

    elif query.data.startswith("set_language_"):
        language_code = query.data.split("_")[-1]
        user_data[chat_id]['language'] = language_code
        await show_menu(update, context, welcome_message=True)

    elif query.data == "go_back":
        await show_menu(update, context, welcome_message=False)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞
    load_user_data()

    application = Application.builder().token(TOKEN).build()

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    application.bot.delete_webhook()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_unlimited_user", add_unlimited_user))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_audio))
    application.add_handler(CallbackQueryHandler(menu_handler,
                                                 pattern="^(help|benefits|check_subscription|set_language_en|set_language_ru|set_language_uk|change_language|go_back)$"))
    application.add_handler(CallbackQueryHandler(buy_subscription, pattern="buy_subscription"))
    application.add_handler(CallbackQueryHandler(view_downloads, pattern="view_downloads"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()